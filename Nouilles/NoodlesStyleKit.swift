//
//  NoodlesStyleKit.swift
//  Nouilles
//
//  Created by Denis Ricard on 2016-11-25.
//  Copyright Â© 2016 Hexaedre. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class NoodlesStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let timer1: UIColor = UIColor(red: 0.994, green: 0.967, blue: 0.599, alpha: 1.000)
        static let timer2: UIColor = NoodlesStyleKit.timer1.shadow(withLevel: 0.1)
        static let timerBkg: UIColor = UIColor(red: 0.909, green: 0.685, blue: 0.075, alpha: 1.000)
        static let timerGradient: CGGradient = CGGradient(colorsSpace: nil, colors: [NoodlesStyleKit.timer1.cgColor, NoodlesStyleKit.timerBkg.cgColor] as CFArray, locations: [0, 1])!
        static var imageOfScanFailure: UIImage?
        static var scanFailureTargets: [AnyObject]?
        static var imageOfScanSuccess: UIImage?
        static var scanSuccessTargets: [AnyObject]?
    }

    //// Colors

    public dynamic class var timer1: UIColor { return Cache.timer1 }
    public dynamic class var timer2: UIColor { return Cache.timer2 }
    public dynamic class var timerBkg: UIColor { return Cache.timerBkg }

    //// Gradients

    public dynamic class var timerGradient: CGGradient { return Cache.timerGradient }

    //// Drawing Methods

    public dynamic class func drawTimerAnimation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit, timerRatio: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)



        //// Variable Declarations
        let timerDash: CGFloat = 6 + timerRatio * 478

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 100, y: 37))
        bezierPath.addCurve(to: CGPoint(x: 71.13, y: 43.99), controlPoint1: CGPoint(x: 89.59, y: 37), controlPoint2: CGPoint(x: 79.78, y: 39.52))
        bezierPath.addCurve(to: CGPoint(x: 37, y: 100), controlPoint1: CGPoint(x: 50.86, y: 54.46), controlPoint2: CGPoint(x: 37, y: 75.61))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 163), controlPoint1: CGPoint(x: 37, y: 134.79), controlPoint2: CGPoint(x: 65.21, y: 163))
        bezierPath.addCurve(to: CGPoint(x: 163, y: 100), controlPoint1: CGPoint(x: 134.79, y: 163), controlPoint2: CGPoint(x: 163, y: 134.79))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 37), controlPoint1: CGPoint(x: 163, y: 65.21), controlPoint2: CGPoint(x: 134.79, y: 37))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 190, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 190), controlPoint1: CGPoint(x: 190, y: 149.71), controlPoint2: CGPoint(x: 149.71, y: 190))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 100), controlPoint1: CGPoint(x: 50.29, y: 190), controlPoint2: CGPoint(x: 10, y: 149.71))
        bezierPath.addCurve(to: CGPoint(x: 48.79, y: 25.98), controlPoint1: CGPoint(x: 10, y: 69.32), controlPoint2: CGPoint(x: 25.35, y: 42.23))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 10), controlPoint1: CGPoint(x: 63.33, y: 15.9), controlPoint2: CGPoint(x: 80.97, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 190, y: 100), controlPoint1: CGPoint(x: 149.71, y: 10), controlPoint2: CGPoint(x: 190, y: 50.29))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(NoodlesStyleKit.timerGradient, start: CGPoint(x: 100, y: 10), end: CGPoint(x: 100, y: 190), options: [])
        context.restoreGState()


        //// timerMask Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 100)
        context.rotate(by: -90 * CGFloat.pi/180)

        let timerMaskPath = UIBezierPath()
        timerMaskPath.move(to: CGPoint(x: 76.5, y: 0))
        timerMaskPath.addCurve(to: CGPoint(x: -0, y: 76.5), controlPoint1: CGPoint(x: 76.5, y: 42.25), controlPoint2: CGPoint(x: 42.25, y: 76.5))
        timerMaskPath.addCurve(to: CGPoint(x: -76.5, y: 0), controlPoint1: CGPoint(x: -42.25, y: 76.5), controlPoint2: CGPoint(x: -76.5, y: 42.25))
        timerMaskPath.addCurve(to: CGPoint(x: 0, y: -76.5), controlPoint1: CGPoint(x: -76.5, y: -42.25), controlPoint2: CGPoint(x: -42.25, y: -76.5))
        timerMaskPath.addCurve(to: CGPoint(x: 76.5, y: 0), controlPoint1: CGPoint(x: 42.25, y: -76.5), controlPoint2: CGPoint(x: 76.5, y: -42.25))
        timerMaskPath.close()
        UIColor.black.setStroke()
        timerMaskPath.lineWidth = 27
        timerMaskPath.lineCapStyle = .round
        context.saveGState()
        context.setLineDash(phase: 4, lengths: [timerDash, 478])
        timerMaskPath.stroke()
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawScanFailure(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 75), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 75)


        //// Color Declarations
        let failure = UIColor(red: 0.896, green: 0.200, blue: 0.200, alpha: 1.000)
        let failureCross = failure.withBrightness(0.5)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 67, height: 67))
        failure.setFill()
        ovalPath.fill()
        failureCross.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 37.45, y: 37.55)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -24.5, y: -3, width: 49, height: 6))
        failureCross.setFill()
        rectanglePath.fill()

        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 37.45, y: 37.55)
        context.rotate(by: -135 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -24.5, y: -3, width: 49, height: 6))
        failureCross.setFill()
        rectangle2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawScanSuccess(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 75), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 75)


        //// Color Declarations
        let success = UIColor(red: 0.742, green: 0.927, blue: 0.079, alpha: 1.000)
        let successCheck = success.shadow(withLevel: 0.6)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 67, height: 67))
        success.setFill()
        ovalPath.fill()
        successCheck.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 42.97, y: 40.1)
        context.rotate(by: -60 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: -21.56, y: -3, width: 43.11, height: 6), cornerRadius: 3)
        successCheck.setFill()
        rectanglePath.fill()

        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 28.03, y: 51.14)
        context.rotate(by: -135 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -9.78, y: -3, width: 19.55, height: 6), cornerRadius: 3)
        successCheck.setFill()
        rectangle2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class func imageOfTimerAnimation(timerRatio: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
            NoodlesStyleKit.drawTimerAnimation(timerRatio: timerRatio)

        let imageOfTimerAnimation = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfTimerAnimation
    }

    public dynamic class var imageOfScanFailure: UIImage {
        if Cache.imageOfScanFailure != nil {
            return Cache.imageOfScanFailure!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
            NoodlesStyleKit.drawScanFailure()

        Cache.imageOfScanFailure = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfScanFailure!
    }

    public dynamic class var imageOfScanSuccess: UIImage {
        if Cache.imageOfScanSuccess != nil {
            return Cache.imageOfScanSuccess!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 75, height: 75), false, 0)
            NoodlesStyleKit.drawScanSuccess()

        Cache.imageOfScanSuccess = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfScanSuccess!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var scanFailureTargets: [AnyObject]! {
        get { return Cache.scanFailureTargets }
        set {
            Cache.scanFailureTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: NoodlesStyleKit.imageOfScanFailure)
            }
        }
    }

    @IBOutlet dynamic var scanSuccessTargets: [AnyObject]! {
        get { return Cache.scanSuccessTargets }
        set {
            Cache.scanSuccessTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setSelectedImage:"), with: NoodlesStyleKit.imageOfScanSuccess)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
